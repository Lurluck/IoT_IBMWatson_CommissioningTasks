[{"id":"3e77d543.c1882a","type":"ibmiot in","z":"deb0d57.1c46528","authentication":"boundService","apiKey":"","inputType":"evt","logicalInterface":"","ruleId":"","deviceId":"MSensors1","applicationId":"","deviceType":"MicrocontrollerSensors","eventType":"+","commandType":"","format":"json","name":"IBM IoT App In","service":"registered","allDevices":false,"allApplications":false,"allDeviceTypes":false,"allLogicalInterfaces":false,"allEvents":true,"allCommands":false,"allFormats":false,"qos":"0","x":100,"y":400,"wires":[["ae0082ac.51ff8","c0c482df.3f3b8"]]},{"id":"ae0082ac.51ff8","type":"function","z":"deb0d57.1c46528","name":"AllSensors","func":"return {payload:{\"msgCity\":msg.payload.d.City,\"msgTemp\":msg.payload.d.Temp,\"msgHum\":msg.payload.d.Humidity}};","outputs":1,"noerr":0,"x":290,"y":400,"wires":[["6e456152.a8b95","8e6f48f8.fbf838"]]},{"id":"c0c482df.3f3b8","type":"debug","z":"deb0d57.1c46528","name":"device data","active":false,"console":"false","complete":"true","x":310,"y":560,"wires":[]},{"id":"cbe1a0b7.cd877","type":"ibmiot out","z":"deb0d57.1c46528","authentication":"boundService","apiKey":"","outputType":"evt","deviceId":"MSensors1","deviceType":"MicrocontrollerSensors","eventCommandType":"update","format":"json","data":"temp:10","qos":"","name":"Send to IBM IoT Platform","service":"registered","x":570,"y":120,"wires":[]},{"id":"5917a925.6a3c08","type":"inject","z":"deb0d57.1c46528","name":"Send Data","topic":"","payload":"true","payloadType":"bool","repeat":"60","crontab":"","once":false,"onceDelay":"","x":110,"y":120,"wires":[["6b4a591c.014b18"]]},{"id":"6b4a591c.014b18","type":"function","z":"deb0d57.1c46528","name":"Device payload","func":"// Microcontrollers with sensors:\n\nvar city = [\"Helsinki\",\"MIkkeli\",\"Tampere\"];\n\n// Array of pseudo random temperatures\nvar temp1 = [15,17,17.5,20,21.5,23,24,22.2,19,17];\n\n// Array of pseudo random relative humidities\nvar humidity1 = [50,55,61,68,65,60,53,49,45,47];\n\n// Counter to select from array.\nvar counter2 = context.get('counter2')||0;\ncounter2 = counter2+1;\nif(counter2 > 2) counter2 = 0;\ncontext.set('counter2',counter2);\n\n\n\n// Counter to select from array.\nvar counter1 = context.get('counter1')||0;\ncounter1 = counter1+1;\nif(counter1 > 9) counter1 = 0;\ncontext.set('counter1',counter1);\n\n// Create MQTT message in JSON\nmsg = {\n  payload: JSON.stringify(\n    {\n      d:{\n        \"City\":city[counter2],\n        \"Temp\" : temp1[counter1],\n        \"Humidity\" : humidity1[counter1],\n      }\n    }\n  )\n};\nreturn msg;\n","outputs":1,"noerr":0,"x":320,"y":120,"wires":[["cbe1a0b7.cd877","805c97ee.3ed9e8"]]},{"id":"805c97ee.3ed9e8","type":"debug","z":"deb0d57.1c46528","name":"Debug output payload","active":true,"console":"false","complete":"payload","x":560,"y":200,"wires":[]},{"id":"86df0b6c.af90c8","type":"comment","z":"deb0d57.1c46528","name":"Device Simulator","info":"Sends simulated device sensor data to IBM Watson IoT Plaform.\n\nCan be configured to send on click or on an automatic interval.\n\n\n#Prerequisite\nOutput node device type and device ID need to match a device that it registered in a running IBM Watson IoT Platform service.\n\n# Watson IoT Platform docs\n[Connecting devices](https://www.bluemix.net/docs/services/IoT/iotplatform_task.html)","x":100,"y":40,"wires":[]},{"id":"141b7c7.ad42a84","type":"comment","z":"deb0d57.1c46528","name":"1. Configure target","info":"","x":550,"y":80,"wires":[]},{"id":"c2dd8ed5.7dd7f","type":"comment","z":"deb0d57.1c46528","name":"2. Click to send data","info":"To automatically send data:\n1. Change *Repeat* to interval.\n2. Click Deploy button.\n","x":110,"y":160,"wires":[]},{"id":"7926c7b2.86d938","type":"comment","z":"deb0d57.1c46528","name":"Temperature Monitor","info":"","x":110,"y":300,"wires":[]},{"id":"188a5e87.e775a1","type":"comment","z":"deb0d57.1c46528","name":"Configure source","info":"","x":100,"y":360,"wires":[]},{"id":"6e456152.a8b95","type":"debug","z":"deb0d57.1c46528","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":510,"y":520,"wires":[]},{"id":"8e6f48f8.fbf838","type":"function","z":"deb0d57.1c46528","name":"Trigger_Helsinki","func":"var fcity = msg.payload.msgCity;\nvar ftemp = msg.payload.msgTemp;\nvar fhum = msg.payload.msgHum;\nvar trigger = 0;\n\nif (fcity == \"Helsinki\"&ftemp < 18)\n{\n    trigger = 1;\n}\n\nmsg = {payload:trigger};\nreturn msg;","outputs":1,"noerr":0,"x":500,"y":400,"wires":[["6a6cc627.54e9c8"]]},{"id":"6a6cc627.54e9c8","type":"debug","z":"deb0d57.1c46528","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":710,"y":480,"wires":[]}]